<!-- Manager.razor -->
@page "/manager"
@using InventoryManagement.Models
@using InventoryManagement.Services
@inject EmployeeService EmployeeService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Manager")]

<h1>Manager Page</h1>

@if (Employees != null && Employees.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Employee ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Position</th>
                <th>Username</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in Employees)
            {
                <tr>
                    <td>@employee.EmployeeID</td>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.Position</td>
                    <td>@employee.Username</td>
                    <td>
                        <button @onclick="() => EditEmployee(employee)">Edit</button>
                        <button @onclick="() => DeleteEmployee(employee.EmployeeID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No employees found.</p>
}

@code {
    private List<Employee> Employees = new List<Employee>(); // Initialize to a non-null value

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        Employees = await EmployeeService.GetAllEmployees();
    }

    private void EditEmployee(Employee employee)
    {
        // Navigate to the employee edit page passing the employee ID or show a modal for editing
    }

    private async Task DeleteEmployee(int employeeId)
    {
        await EmployeeService.DeleteEmployee(employeeId);
        await LoadEmployees();
    }
}
