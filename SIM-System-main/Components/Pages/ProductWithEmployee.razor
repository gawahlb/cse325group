@page "/products-with-employee"
@using InventoryManagement.Models
@using InventoryManagement.Services
@inject ProductService productService
@inject EmployeeService employeeService
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Manager,Employee")]

<h3>Welcome, @employee.FirstName!</h3>

<h4>Product List</h4>

@if (products != null && products.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Product ID</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Discontinued</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductID</td>
                    <td>@product.ProductName</td>
                    <td>@product.Price</td>
                    <td>@product.Quantity</td>
                    <td>@(product.Discontinued ? "Yes" : "No")</td>
                    @* <td><a href="@($"products/update/{product.ProductID}")">Edit</a></td>
            <td><button class="btn btn-danger" @onclick="()=>DeleteProduct(product)">Delete</button></td> *@
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No products found.</p>
}

@code {
    private List<Product> products;
    private Employee employee;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            int employeeId = 1;
            employee = await employeeService.GetEmployeetByIdAsync(employeeId);

            products = await productService.GetAllProductsAsync();
        }
        catch (Exception ex)
        {

        }
    }
    @* private async Task DeleteProduct(Product product)
{
try
{
await productService.DeleteProductAsync(product);
products.Remove(product);
}
catch (Exception ex)
{

}
}*@
}
