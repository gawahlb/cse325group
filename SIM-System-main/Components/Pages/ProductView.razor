<!-- Products.razor -->
@page "/products"
@using InventoryManagement.Models
@using InventoryManagement.Services
@inject ProductService productService
@inject TempDataService TempData;
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Manager,Employee")]

<h3>Product List</h3>

@if (!string.IsNullOrEmpty(tempMessage))
{
  <p class="alert alert-success">@tempMessage</p>
}

@if (products != null && products.Any())
{
  <table class="table">
    <thead>
      <tr>
        <th>Product ID</th>
        <th>Product Name</th>
        <th>Price</th>
        <th>Quantity</th>
        <th>Discontinued</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var product in products)
      {
        <tr>
          <td>@product.ProductID</td>
          <td>@product.ProductName</td>
          <td>@product.Price</td>
          <td>@product.Quantity</td>
          @if (@product.Discontinued)
          {
            <td>Yes</td>
          }
          else
          {
            <td>No</td>
          }
          <td><a href="/products/update/@product.ProductID">Edit</a></td>
          @* <td><button class="btn btn-danger" @onclick="()=>DeleteProduct(product)">Delete</button></td> *@
        </tr>
      }
    </tbody>
  </table>
}
else
{
  <p>No products found.</p>
}
<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square-fill"
  viewBox="0 0 16 16">
  <path
    d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm6.5 4.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3a.5.5 0 0 1 1 0" />
</svg><button class="btn btn-link"><a href="/products/create">Create a new Product</a></button>

@code {
  private List<Product>? products;
  public string? tempMessage;

  protected override async Task OnInitializedAsync()
  {
    tempMessage = TempData.GetTempData();
    await RefreshProducts();
  }
  @* private async Task DeleteProduct(Product product)
{
try
{
await productService.DeleteProductAsync(product);
products.Remove(product);
}
catch (Exception ex)
{

}
} *@
  private async Task RefreshProducts()
  {
    // Fetch products data from the database
    products = await productService.GetAllProductsAsync();
  }
}